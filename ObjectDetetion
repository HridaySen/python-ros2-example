# obstacle_stop.py

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

class ObstacleStopper(Node):

    def __init__(self):
        super().__init__('obstacle_stopper')
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 10)
        self.threshold = 0.3  # meters

    def scan_callback(self, msg: LaserScan):
        min_distance = min(msg.ranges)

        twist = Twist()
        if min_distance < self.threshold:
            self.get_logger().info('Obstacle detected! Stopping robot.')
            twist.linear.x = 0.0
        else:
            twist.linear.x = 0.1  # Move forward if no obstacle

        self.cmd_vel_pub.publish(twist)

def main(args=None):
    rclpy.init(args=args)
    node = ObstacleStopper()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
