import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import math

class ObstacleAvoider(Node):
    def __init__(self):
        super().__init__('obstacle_avoider')

        self.cmd_vel_pub = self.create_publisher(Twist, 'cmd_vel', 10)
        self.laser_sub = self.create_subscription(LaserScan, 'scan', self.laser_callback, 10)

        self.obstacle_threshold = 0.3  # meters
        self.obstacle_detected = False
        self.turning = False
        self.turn_duration = 2.5  # seconds to turn ~90 degrees

        self.timer = self.create_timer(0.1, self.timer_callback)
        self.start_turn_time = None

    def laser_callback(self, msg):
        front_index = len(msg.ranges) // 2
        front_distance = msg.ranges[front_index]

        if not math.isinf(front_distance) and front_distance < self.obstacle_threshold:
            self.get_logger().info(f"Obstacle detected at {front_distance:.2f}m! Turning.")
            self.obstacle_detected = True
        else:
            self.obstacle_detected = False

    def timer_callback(self):
        cmd = Twist()

        if self.turning:
            if (self.get_clock().now() - self.start_turn_time).nanoseconds / 1e9 < self.turn_duration:
                cmd.angular.z = 0.5  # Turn in place
            else:
                self.turning = False
                self.get_logger().info("Finished turning.")
        elif self.obstacle_detected:
            self.turning = True
            self.start_turn_time = self.get_clock().now()
        else:
            cmd.linear.x = 0.2  # Move forward

        self.cmd_vel_pub.publish(cmd)
